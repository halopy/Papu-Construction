
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Sumerath
 */
public class WorkerPanel extends javax.swing.JFrame {
DefaultTableModel Model;
String[] [] arr; 
    /**
     * Creates new form WorkerPanel
     */
    public WorkerPanel() throws FileNotFoundException, IOException {
        initComponents();
        Model = new DefaultTableModel();
        TableWorker.setModel(Model);
        Model.addColumn("    ID");
        Model.addColumn("Name");
        Model.addColumn("Age");
        Model.addColumn("Gender");
        Model.addColumn("Contact");
        Model.addColumn("Address");
        Model.addColumn("Expertise");
        Model.addColumn("Time");
        Model.addColumn("Price Per Day");
        
        TableWorker.getColumnModel().getColumn(0).setPreferredWidth(15);
        TableWorker.getColumnModel().getColumn(2).setPreferredWidth(15);
        TableWorker.getColumnModel().getColumn(1).setPreferredWidth(150);
        TableWorker.getColumnModel().getColumn(3).setPreferredWidth(15);
        
        FileInputStream fins = new FileInputStream(new File("src\\Excel\\Workers.xlsx")); 
        XSSFWorkbook wb = new XSSFWorkbook(fins);
        XSSFSheet sheet = wb.getSheetAt(0);
        FormulaEvaluator fmEval = wb.getCreationHelper().createFormulaEvaluator(); 
        int r = 0;
        arr = new String[sheet.getLastRowNum()+1] [8]; 
        for(Row row : sheet)
        {
            Model.addRow(new Object[]{});
            TableWorker.setValueAt(r+1, r, 0);
            int col = 1;
            for(Cell cell : row)
            {
                switch(fmEval.evaluateInCell(cell).getCellTypeEnum())
                {
                    case NUMERIC:
                        TableWorker.setValueAt(cell.getNumericCellValue() + "", r, col);
                        //System.out.print(cell.getNumericCellValue()+"\t\t");
                        arr[r] [col-1] = cell.getNumericCellValue()+ ""; 
                        break;
                    case STRING:
                        TableWorker.setValueAt(cell.getStringCellValue(), r, col);
                        //System.out.print(cell.getStringCellValue()+"\t\t");
                        arr[r] [col-1] = cell.getStringCellValue();
                        break;
                }
                col++;
            }
            r++;
            System.out.println();
        }
        for(String str[]: arr)
        {
            for(String str1: str)
            {
                System.out.print(str1 + " ");
            }
            System.out.println(); 
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelWorker = new javax.swing.JPanel();
        LabelWorkers = new javax.swing.JLabel();
        ButtonSearchPriceWorker = new javax.swing.JButton();
        TextSearchPriceWorker = new javax.swing.JTextField();
        LabelExpertiseWorker = new javax.swing.JLabel();
        ComboBoxExpertiseWorker = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableWorker = new javax.swing.JTable();
        ButtonExit = new javax.swing.JButton();
        ButtonBack = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PanelWorker.setBackground(new java.awt.Color(135, 206, 235));

        LabelWorkers.setFont(new java.awt.Font("Verdana", 1, 36)); // NOI18N
        LabelWorkers.setText("Workers");

        ButtonSearchPriceWorker.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ButtonSearchPriceWorker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/search icon.jpg"))); // NOI18N
        ButtonSearchPriceWorker.setText(" Search By Price");
        ButtonSearchPriceWorker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSearchPriceWorkerActionPerformed(evt);
            }
        });

        LabelExpertiseWorker.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        LabelExpertiseWorker.setText("Expertise:");

        ComboBoxExpertiseWorker.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Labourer", "Electrician", "Plumber", "Plaster", "Painter" }));
        ComboBoxExpertiseWorker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxExpertiseWorkerActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        TableWorker.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Age", "Gender", "Phone Number", "Address", "Expertise", "Time", "Price Per Day"
            }
        ));
        jScrollPane1.setViewportView(TableWorker);
        if (TableWorker.getColumnModel().getColumnCount() > 0) {
            TableWorker.getColumnModel().getColumn(0).setResizable(false);
            TableWorker.getColumnModel().getColumn(1).setResizable(false);
            TableWorker.getColumnModel().getColumn(2).setResizable(false);
            TableWorker.getColumnModel().getColumn(3).setResizable(false);
            TableWorker.getColumnModel().getColumn(4).setResizable(false);
            TableWorker.getColumnModel().getColumn(5).setResizable(false);
            TableWorker.getColumnModel().getColumn(6).setResizable(false);
            TableWorker.getColumnModel().getColumn(7).setResizable(false);
            TableWorker.getColumnModel().getColumn(8).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 896, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        ButtonExit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ButtonExit.setText("Exit");
        ButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExitActionPerformed(evt);
            }
        });

        ButtonBack.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ButtonBack.setText("Back");
        ButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelWorkerLayout = new javax.swing.GroupLayout(PanelWorker);
        PanelWorker.setLayout(PanelWorkerLayout);
        PanelWorkerLayout.setHorizontalGroup(
            PanelWorkerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelWorkerLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(PanelWorkerLayout.createSequentialGroup()
                .addGroup(PanelWorkerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PanelWorkerLayout.createSequentialGroup()
                        .addGap(366, 366, 366)
                        .addComponent(LabelWorkers, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelWorkerLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelWorkerLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(PanelWorkerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(PanelWorkerLayout.createSequentialGroup()
                                .addComponent(LabelExpertiseWorker)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ComboBoxExpertiseWorker, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(TextSearchPriceWorker, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonSearchPriceWorker)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        PanelWorkerLayout.setVerticalGroup(
            PanelWorkerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelWorkerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelWorkers, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelWorkerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonSearchPriceWorker, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextSearchPriceWorker, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelWorkerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelExpertiseWorker)
                    .addComponent(ComboBoxExpertiseWorker, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PanelWorkerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        MenuBar.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Help? Read Manual");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        MenuBar.add(jMenu2);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelWorker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelWorker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonSearchPriceWorkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSearchPriceWorkerActionPerformed
        int exception = 0;
     
        if(TextSearchPriceWorker.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Please enter the Price Per Day.");
            exception = 1; 
        }
        if(exception == 0)
        {
            try
            {
            if(Integer.parseInt(TextSearchPriceWorker.getText())<0)
            {
                JOptionPane.showMessageDialog(rootPane, "Please enter the a valid Price Per Day.");
                exception = 1;
            }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Please enter number to search Price Per Day", "Alert", JOptionPane.ERROR_MESSAGE);
                exception = 1; 
            }
        }
        
        if(exception == 0)
        {
        double TextPrice = Double.parseDouble(TextSearchPriceWorker.getText()); 
        Double[] prices = new Double[arr.length];
        int i = 0;
        for(String s[] : arr)
        {
            prices[i] = Double.parseDouble(s[7]);
            i++;
        }
        for(i = 0 ; i < prices.length-1 ; i++)
            {
                int min = i;
                for(int j = i + 1 ; j < prices.length ; j++)
                {
                    if(prices[min] > prices[j])
                    {
                        min = j;
                    }    
                }
                if(i != min)
                {
                    Double a = prices[i];
                    prices[i] = prices[min];
                    prices[min] = a;
                }        
            }
        System.out.println(Arrays.toString(prices));
        int start = 0;
        int end = prices.length-1;
        int col = 1;
        while(start <= end)
        {
           int mid = (start + end) / 2;
           if(TextPrice == prices[mid])
           {
               for(String[] c1 : arr)
               {
                   if(Double.parseDouble(c1[7]) == TextPrice)
                   {
                       
                       Model.addRow(new Object[]{});
                       Model.setValueAt(1, 0, 0);
                       for(String data : c1)
                       {
                           Model.setValueAt(data, 0, col);
                           col++;
                       }
                       JOptionPane.showMessageDialog(this, "The serached result for Price Per Day is given in the table.");
                       Model.setRowCount(1);
                       break;
                   }
               }
               break;
           }
           else if(TextPrice < prices[mid])
           {
               end = mid - 1;
           }
           else
           {
               start = mid + 1;
           }
           
                  
        }
        if(col == 1)
        {
            JOptionPane.showMessageDialog(rootPane, "The serached Price Per Day is not found.");
            
        }
        
        } 
    }//GEN-LAST:event_ButtonSearchPriceWorkerActionPerformed
    
        
    
    private void ComboBoxExpertiseWorkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxExpertiseWorkerActionPerformed
        // TODO add your handling code here:
        if(ComboBoxExpertiseWorker.getSelectedItem().equals("Default"))
        {
            String[] Expertise = new String[arr.length];
            Model.setRowCount(0);
            int i = 0;
            int r = 0;
         
            for(String[] c1 : arr)
            {
                int col = 1;
                    Model.addRow(new Object[]{});
                    Model.setValueAt(r+1, r, 0);
                    for(String data : c1)
                    {
                        Model.setValueAt(data, r, col);
                        col++;
                    }
                    r++;
            }
        }
        else if(ComboBoxExpertiseWorker.getSelectedItem().equals("Electrician"))
        {
            String[] Expertise = new String[arr.length];
            Model.setRowCount(0);
            int i = 0;
            int r = 0;
         
            //storing the category Electrician  in an array 
            for(String[] c1 : arr)
            {
                int col = 1;
                if("Electrician".equals(c1[5]))
                {
                    Model.addRow(new Object[]{});
                    Model.setValueAt(r+1, r, 0);
                    for(String data : c1)
                    {
                        Model.setValueAt(data, r, col);
                        col++;
                    }
                    r++;
                }   
            }
        }
        else if(ComboBoxExpertiseWorker.getSelectedItem().equals("Labourer"))
        {
            String[] Expertise = new String[arr.length];
            Model.setRowCount(0);
            int i = 0;
            int r = 0;
         
            //storing the category Labourer  in an array 
            for(String[] c1 : arr)
            {
                int col = 1;
                if("Labourer".equals(c1[5]))
                {
                    Model.addRow(new Object[]{});
                    Model.setValueAt(r+1, r, 0);
                    for(String data : c1)
                    {
                        Model.setValueAt(data, r, col);
                        col++;
                    }
                    r++;
                }   
            }
        }
        else if(ComboBoxExpertiseWorker.getSelectedItem().equals("Plumber"))
        {
            String[] Expertise = new String[arr.length];
            Model.setRowCount(0);
            int i = 0;
            int r = 0;
         
            //storing the category Plumber  in an array 
            for(String[] c1 : arr)
            {
                int col = 1;
                if("Plumber".equals(c1[5]))
                {
                    Model.addRow(new Object[]{});
                    Model.setValueAt(r+1, r, 0);
                    for(String data : c1)
                    {
                        Model.setValueAt(data, r, col);
                        col++;
                    }
                    r++;
                }   
            }
        }
        else if(ComboBoxExpertiseWorker.getSelectedItem().equals("Plaster"))
        {
            String[] Expertise = new String[arr.length];
            Model.setRowCount(0);
            int i = 0;
            int r = 0;
         
            //storing the category Plaster  in an array 
            for(String[] c1 : arr)
            {
                int col = 1;
                if("Plaster".equals(c1[5]))
                {
                    Model.addRow(new Object[]{});
                    Model.setValueAt(r+1, r, 0);
                    for(String data : c1)
                    {
                        Model.setValueAt(data, r, col);
                        col++;
                    }
                    r++;
                }   
            }
        }
        else if(ComboBoxExpertiseWorker.getSelectedItem().equals("Painter"))
        {
            String[] Expertise = new String[arr.length];
            Model.setRowCount(0);
            int i = 0;
            int r = 0;
         
            //storing the category Painter  in an array 
            for(String[] c1 : arr)
            {
                int col = 1;
                if("Painter".equals(c1[5]))
                {
                    Model.addRow(new Object[]{});
                    Model.setValueAt(r+1, r, 0);
                    for(String data : c1)
                    {
                        Model.setValueAt(data, r, col);
                        col++;
                    }
                    r++;
                }   
            }
        }
        
    }//GEN-LAST:event_ComboBoxExpertiseWorkerActionPerformed

    private void ButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExitActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame("EXIT");
        if(JOptionPane.showConfirmDialog(frame, "Confirm Exit", "EXIT", JOptionPane.YES_NO_OPTION)== JOptionPane.YES_NO_OPTION)
        {
            System.exit(0);
        }
    }//GEN-LAST:event_ButtonExitActionPerformed

    private void ButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBackActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new GUI().setVisible(true); 
    }//GEN-LAST:event_ButtonBackActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        if(Desktop.isDesktopSupported()){
            try{
                File file=new File("src\\User Manual\\User Manual.PDF");
                Desktop.getDesktop().open(file);
                
            }catch(Exception ex){
                JOptionPane.showMessageDialog(this, "File not found!!");
            }
            
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, IOException {
        /* Set the Nimbus look and feel */
        FileInputStream fins = new FileInputStream(new File("src\\Excel\\Workers.xlsx")); 
        XSSFWorkbook wb = new XSSFWorkbook(fins);
        XSSFSheet sheet = wb.getSheetAt(0);
        FormulaEvaluator fmEval = wb.getCreationHelper().createFormulaEvaluator(); 
        for(Row row : sheet)
        {
            for(Cell cell : row)
            {
                switch(fmEval.evaluateInCell(cell).getCellTypeEnum())
                {
                    case NUMERIC:
                        System.out.print(cell.getNumericCellValue()+"\t\t");
                        break;
                    case STRING:
                        System.out.print(cell.getStringCellValue()+"\t\t");
                        break;
                }
            }
            System.out.println();
        }
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WorkerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WorkerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WorkerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WorkerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new WorkerPanel().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(WorkerPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBack;
    private javax.swing.JButton ButtonExit;
    private javax.swing.JButton ButtonSearchPriceWorker;
    private javax.swing.JComboBox<String> ComboBoxExpertiseWorker;
    private javax.swing.JLabel LabelExpertiseWorker;
    private javax.swing.JLabel LabelWorkers;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JPanel PanelWorker;
    private javax.swing.JTable TableWorker;
    private javax.swing.JTextField TextSearchPriceWorker;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}